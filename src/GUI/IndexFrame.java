/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JSpinner;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.InternationalFormatter;
import javax.swing.text.PlainDocument;
import pjct.imglinker.ImageMerger;

/**
 *
 * @author nguyenpham
 */
public class IndexFrame extends javax.swing.JFrame {

    /**
     * Creates new form IndexFrame
     */
    public IndexFrame() {
        this.corners = new PrintCorner[]{PrintCorner.UPPERLEFT, PrintCorner.UPPERRIGHT, PrintCorner.LOWERLEFT, PrintCorner.LOWERRIGHT};
        this.cornerNames = new String[]{"UpperLeft", "UpperRight", "LowerLeft", "LowerRight"};
        mapImages = new HashMap<>();
        this.mapWord = IntStream.range(0, corners.length).boxed().collect(Collectors.toMap(i -> corners[i], i -> cornerNames[i]));
        for (PrintCorner corner : corners) {
            try {
                mapImages.put(mapWord.get(corner), new ImageIcon(ImageIO.read(getClass().getResource("/images/CornerComboBox/" + mapWord.get(corner) + ".jpg"))));
            } catch (IOException ex) {
                Logger.getLogger(IndexFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.inverseMapWord = mapWord.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));
        
        this.WriteOptions = new Vector<>();
        this.ReadOptions = new Vector<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Direction_ButtonGroup = new javax.swing.ButtonGroup();
        Read_FileChooser = new javax.swing.JFileChooser();
        Write_FileChooser = new javax.swing.JFileChooser();
        IO_Panel = new javax.swing.JPanel();
        Read_Label = new javax.swing.JLabel();
        Read_ComboBox = new javax.swing.JComboBox<>();
        WriteDirectoryBrowse_Button = new javax.swing.JButton();
        ReadDirectoryBrowse_Button = new javax.swing.JButton();
        Write_Label = new javax.swing.JLabel();
        Write_ComboBox = new javax.swing.JComboBox<>();
        Mod_Panel = new javax.swing.JPanel();
        Corner_Label = new javax.swing.JLabel();
        ImageCellRenderer renderer = new ImageCellRenderer(mapImages);
        Corner_ComboBox = new javax.swing.JComboBox<String>(cornerNames);
        Grid_Label = new javax.swing.JLabel();
        Grid_Spinner = new javax.swing.JSpinner();
        Pixel_Label = new javax.swing.JLabel();
        Direction_Label = new javax.swing.JLabel();
        Direction_Vertical_Radio = new javax.swing.JRadioButton();
        Direction_Horizontal_Radio = new javax.swing.JRadioButton();
        Row_Label = new javax.swing.JLabel();
        Column_Label = new javax.swing.JLabel();
        Row_TextField = new javax.swing.JTextField();
        Column_TextField = new javax.swing.JTextField();
        Confirm_Button = new javax.swing.JButton();

        Direction_ButtonGroup.add(Direction_Horizontal_Radio);
        Direction_ButtonGroup.add(Direction_Vertical_Radio);
        Direction_ButtonGroup.setSelected(Direction_Horizontal_Radio.getModel(), true);
        Direction = PrintDirection.HORIZONTAL;

        Read_FileChooser.setCurrentDirectory(new java.io.File("/"));
        Read_FileChooser.setDialogTitle("Select image folder:");
        Read_FileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        Read_FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Read_FileChooserActionPerformed(evt);
            }
        });

        Write_FileChooser.setCurrentDirectory(new java.io.File("/"));
        Write_FileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        Write_FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Write_FileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Image Merger");
        setMinimumSize(new java.awt.Dimension(837, 249));
        setResizable(false);

        IO_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IO Directories", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(194, 180, 180))); // NOI18N

        Read_Label.setText("Read Directory");

        Read_ComboBox.setEditable(true);
        Read_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(ReadOptions));
        Read_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Read_ComboBoxActionPerformed(evt);
            }
        });

        WriteDirectoryBrowse_Button.setText("Browse");
        WriteDirectoryBrowse_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WriteDirectoryBrowse_ButtonMouseClicked(evt);
            }
        });

        ReadDirectoryBrowse_Button.setText("Browse");
        ReadDirectoryBrowse_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReadDirectoryBrowse_ButtonMouseClicked(evt);
            }
        });

        Write_Label.setText("Write Directory");

        Write_ComboBox.setEditable(true);
        Write_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(WriteOptions));
        Write_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Write_ComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IO_PanelLayout = new javax.swing.GroupLayout(IO_Panel);
        IO_Panel.setLayout(IO_PanelLayout);
        IO_PanelLayout.setHorizontalGroup(
            IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IO_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Write_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(Read_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Write_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Read_ComboBox, 0, 217, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReadDirectoryBrowse_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(WriteDirectoryBrowse_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        IO_PanelLayout.setVerticalGroup(
            IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IO_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IO_PanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(Read_Label))
                    .addComponent(Read_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReadDirectoryBrowse_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Write_Label)
                    .addComponent(Write_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WriteDirectoryBrowse_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Mod_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(182, 171, 171))); // NOI18N

        Corner_Label.setText("Corner");

        Corner_ComboBox.setRenderer(renderer);
        Corner_ComboBox.setSelectedItem("UpperRight");
        Corner = (PrintCorner) inverseMapWord.get(Corner_ComboBox.getSelectedItem());
        Corner_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Corner_ComboBoxActionPerformed(evt);
            }
        });

        Grid_Label.setText("Grid");

        Grid_Spinner.setModel(new javax.swing.SpinnerNumberModel(0L, 0L, null, 1L));
        JSpinner.NumberEditor jsEditor = (JSpinner.NumberEditor) Grid_Spinner.getEditor();

        JFormattedTextField Grid_Spinner_TextEditor = jsEditor.getTextField();

        NumberFormat format = NumberFormat.getNumberInstance();

        DocumentFilter Grid_filter = new IntFilter();

        Grid_Spinner_TextEditor.setFormatterFactory(new DefaultFormatterFactory(
            new InternationalFormatter(format){
                @Override
                protected DocumentFilter getDocumentFilter(){
                    return Grid_filter;
                }
            }));

            Grid = Grid_Spinner.getModel().getValue() != null ? (int) (long) Grid_Spinner.getModel().getValue() : 0;
            Grid_Spinner.addChangeListener(new javax.swing.event.ChangeListener() {
                public void stateChanged(javax.swing.event.ChangeEvent evt) {
                    Grid_SpinnerStateChanged(evt);
                }
            });

            Pixel_Label.setText("Pixels");

            Direction_Label.setText("Direction");

            Direction_Vertical_Radio.setText("Vertical");
            Direction_Vertical_Radio.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Direction_Vertical_RadioActionPerformed(evt);
                }
            });

            Direction_Horizontal_Radio.setText("Horizontal");
            Direction_Horizontal_Radio.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Direction_Horizontal_RadioActionPerformed(evt);
                }
            });

            Row_Label.setText("Row");

            Column_Label.setText("Column");

            Row_TextField.setToolTipText("");
            Row_TextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
            PlainDocument Row_doc = (PlainDocument) Row_TextField.getDocument();
            Row_TextField.getDocument().addDocumentListener(new DocumentListener(){
                public void changedUpdate(DocumentEvent evt) {
                    Row_TextFieldDocumentChangedUpdate(evt);
                }
                public void removeUpdate(DocumentEvent evt) {
                    Row_TextFieldDocumentRemoveUpdate(evt);
                }
                public void insertUpdate(DocumentEvent evt) {
                    Row_TextFieldDocumentInsertUpdate(evt);
                }
            });
            Row_TextField.setText("3");
            Row_doc.setDocumentFilter(new IntFilter());
            Row = Integer.parseInt(Row_TextField.getText());

            PlainDocument Col_doc = (PlainDocument) Column_TextField.getDocument();
            Column_TextField.getDocument().addDocumentListener(new DocumentListener(){
                public void changedUpdate(DocumentEvent evt) {
                    Column_TextFieldDocumentChangedUpdate(evt);
                }
                public void removeUpdate(DocumentEvent evt) {
                    Column_TextFieldDocumentRemoveUpdate(evt);
                }
                public void insertUpdate(DocumentEvent evt) {
                    Column_TextFieldDocumentInsertUpdate(evt);
                }
            });
            Column_TextField.setText("3");
            Col_doc.setDocumentFilter(new IntFilter());
            Column = Integer.parseInt(Column_TextField.getText());

            javax.swing.GroupLayout Mod_PanelLayout = new javax.swing.GroupLayout(Mod_Panel);
            Mod_Panel.setLayout(Mod_PanelLayout);
            Mod_PanelLayout.setHorizontalGroup(
                Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(Mod_PanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Corner_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Grid_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Mod_PanelLayout.createSequentialGroup()
                            .addComponent(Grid_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Pixel_Label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE))
                        .addGroup(Mod_PanelLayout.createSequentialGroup()
                            .addComponent(Corner_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(48, 48, 48)))
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Mod_PanelLayout.createSequentialGroup()
                            .addComponent(Column_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Column_Label))
                        .addGroup(Mod_PanelLayout.createSequentialGroup()
                            .addComponent(Row_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Row_Label)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(Direction_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(5, 5, 5)
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Direction_Vertical_Radio, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Direction_Horizontal_Radio, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(23, 23, 23))
            );

            Mod_PanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Direction_Horizontal_Radio, Direction_Vertical_Radio});

            Mod_PanelLayout.setVerticalGroup(
                Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Mod_PanelLayout.createSequentialGroup()
                    .addContainerGap(14, Short.MAX_VALUE)
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Corner_Label)
                        .addComponent(Corner_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Row_Label)
                        .addComponent(Direction_Label)
                        .addComponent(Direction_Vertical_Radio)
                        .addComponent(Row_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Mod_PanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Column_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Column_Label))
                            .addGap(31, 31, 31))
                        .addGroup(Mod_PanelLayout.createSequentialGroup()
                            .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(Mod_PanelLayout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addGroup(Mod_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Grid_Label)
                                        .addComponent(Grid_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Pixel_Label)))
                                .addGroup(Mod_PanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Direction_Horizontal_Radio)))
                            .addContainerGap())))
            );

            Mod_PanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Column_TextField, Grid_Spinner, Row_TextField});

            Confirm_Button.setText("Merge");
            Confirm_Button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    Confirm_ButtonMouseClicked(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(IO_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Mod_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(Confirm_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(IO_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Mod_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Confirm_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void Write_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Write_ComboBoxActionPerformed
        WriteDirectory = (String) Write_ComboBox.getSelectedItem();
    }//GEN-LAST:event_Write_ComboBoxActionPerformed

    private void Read_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Read_ComboBoxActionPerformed
        ReadDirectory = (String) Read_ComboBox.getSelectedItem();
    }//GEN-LAST:event_Read_ComboBoxActionPerformed

    private void ReadDirectoryBrowse_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReadDirectoryBrowse_ButtonMouseClicked
        Read_FileChooser.showOpenDialog(ReadDirectoryBrowse_Button);
    }//GEN-LAST:event_ReadDirectoryBrowse_ButtonMouseClicked

    private void Read_FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Read_FileChooserActionPerformed
        if (evt.getActionCommand().equals("ApproveSelection")) {
            if (!ReadOptions.contains(Read_FileChooser.getSelectedFile().getAbsolutePath())) {
                ReadOptions.add(Read_FileChooser.getSelectedFile().getAbsolutePath());
//                try (PrintWriter out = new PrintWriter("Read.txt")){
//                    out.
//                } catch (FileNotFoundException ex) {
//                    File readFile = new File("/Read.txt");
//                    try (PrintWriter out = new PrintWriter("Read.txt")){
//                    
//                    } catch (FileNotFoundException ex1) {}
//                }
            }
            DefaultComboBoxModel model = new DefaultComboBoxModel(ReadOptions);
            Read_ComboBox.setModel(model);
            Read_ComboBox.setSelectedItem(Read_FileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_Read_FileChooserActionPerformed

    private void Write_FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Write_FileChooserActionPerformed
        if (evt.getActionCommand().equals("ApproveSelection")) {
            if (!WriteOptions.contains(Write_FileChooser.getSelectedFile().getAbsolutePath())) {
                WriteOptions.add(Write_FileChooser.getSelectedFile().getAbsolutePath());
            }
            DefaultComboBoxModel model = new DefaultComboBoxModel(WriteOptions);
            Write_ComboBox.setModel(model);
            Write_ComboBox.setSelectedItem(Write_FileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_Write_FileChooserActionPerformed

    private void WriteDirectoryBrowse_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WriteDirectoryBrowse_ButtonMouseClicked
        Write_FileChooser.showOpenDialog(WriteDirectoryBrowse_Button);
    }//GEN-LAST:event_WriteDirectoryBrowse_ButtonMouseClicked

    private void Direction_Vertical_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Direction_Vertical_RadioActionPerformed
        Direction = PrintDirection.VERTICAL;
    }//GEN-LAST:event_Direction_Vertical_RadioActionPerformed

    private void Corner_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Corner_ComboBoxActionPerformed
        Corner = (PrintCorner) inverseMapWord.get(Corner_ComboBox.getSelectedItem());
    }//GEN-LAST:event_Corner_ComboBoxActionPerformed

    private void Confirm_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Confirm_ButtonMouseClicked
        InputForm = new IndexFrameForm(ReadDirectory, WriteDirectory, Row, Column, Grid, Corner, Direction);
        try {
            InputForm.addReceiver(new ImageMerger());
            InputForm.sendData();
        } catch (NullPointerException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Confirm_ButtonMouseClicked

    private void Direction_Horizontal_RadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Direction_Horizontal_RadioActionPerformed
        Direction = PrintDirection.HORIZONTAL;
    }//GEN-LAST:event_Direction_Horizontal_RadioActionPerformed

    private void Grid_SpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Grid_SpinnerStateChanged
        try {
            Grid_Spinner.commitEdit();
        } catch (ParseException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        Grid = Grid_Spinner.getModel().getValue() != null ? (int) (long) Grid_Spinner.getModel().getValue() : 0;
    }//GEN-LAST:event_Grid_SpinnerStateChanged

    private void Row_TextFieldDocumentChangedUpdate(DocumentEvent evt) {
        Row = Integer.parseInt(Row_TextField.getText());
    }

    private void Row_TextFieldDocumentRemoveUpdate(DocumentEvent evt) {
        if ("".equals(Row_TextField.getText())) {
            Row = 0;
        } else {
            Row = Integer.parseInt(Row_TextField.getText());
        }
    }

    private void Row_TextFieldDocumentInsertUpdate(DocumentEvent evt) {
        Row = Integer.parseInt(Row_TextField.getText());
    }

    private void Column_TextFieldDocumentChangedUpdate(DocumentEvent evt) {
        Column = Integer.parseInt(Column_TextField.getText());
    }

    private void Column_TextFieldDocumentRemoveUpdate(DocumentEvent evt) {
        if ("".equals(Column_TextField.getText())) {
            Column = 0;
        } else {
            Column = Integer.parseInt(Column_TextField.getText());
        }
    }

    private void Column_TextFieldDocumentInsertUpdate(DocumentEvent evt) {
        Column = Integer.parseInt(Column_TextField.getText());
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IndexFrame().setVisible(true);
        });
    }

    public class ImageCellRenderer extends DefaultListCellRenderer {

        private final Map<String, Icon> mapImages;

        public ImageCellRenderer(Map<String, Icon> mapImages) {
            this.mapImages = new HashMap<>(mapImages);
            setHorizontalAlignment(SwingConstants.CENTER);
        }

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value instanceof String) {
                Icon icon = mapImages.get(value.toString());
                setIcon(icon);
                setText(null);
            }
            return this;
        }

    }
    
    private class IndexFrameForm extends AbstractGUIForm {

        protected HashMap<String, Object> hmap;

        public IndexFrameForm(String ReadDirectory, String WriteDirectory, Integer Row, Integer Column, Integer Grid, GUI.IndexFrame.PrintCorner Corner, IndexFrame.PrintDirection Direction) {
            hmap = new HashMap<>();
            hmap.put("ReadDirectory", ReadDirectory);
            hmap.put("WriteDirectory", WriteDirectory);
            hmap.put("Row", Row);
            hmap.put("Column", Column);
            hmap.put("Corner", Corner);
            hmap.put("Direction", Direction);
            hmap.put("Grid", Grid);

            super.setData(hmap);
        }

        @Override
        boolean checkDataConstraints(HashMap<String, Object> data) throws RuntimeException {
            if (hmap.get("ReadDirectory") == null) {
                throw new RuntimeException("Read Directory is empty");
            }
            if (hmap.get("WriteDirectory") == null) {
                throw new RuntimeException("Write Directory is empty");
            }
            if (hmap.get("Corner") == null) {
                throw new RuntimeException("Corner is empty");
            }
            if (hmap.get("Row") == null) {
                throw new RuntimeException("Row is empty");
            }
            if (hmap.get("Column") == null) {
                throw new RuntimeException("Column is empty");
            }
            if (hmap.get("Grid") == null) {
                throw new RuntimeException("Grid is empty");
            }
            if (hmap.get("Direction") == null) {
                throw new RuntimeException("Direction is empty");
            }
            return true;
        }
    }

    //add filter to document, modify test() function accordingly.
    private class IntFilter extends DocumentFilter {

        @Override
        public void insertString(FilterBypass fb, int offset, String string,
                AttributeSet attr) throws BadLocationException {
            Document doc = fb.getDocument();
            StringBuilder sb = new StringBuilder();
            sb.append(doc.getText(0, doc.getLength()));
            sb.insert(offset, string);

            if (test(sb.toString())) {
                super.insertString(fb, offset, string, attr);
            }

        }

        private boolean test(String text) {
            try {
                Integer.parseInt(text);
                return true;
            } catch (NumberFormatException ex) {
                return text.trim().isEmpty();
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text,
                AttributeSet attrs) throws BadLocationException {

            Document doc = fb.getDocument();
            StringBuilder sb = new StringBuilder();
            sb.append(doc.getText(0, doc.getLength()));
            sb.replace(offset, offset + length, text);

            if (test(sb.toString())) {
                super.replace(fb, offset, length, text, attrs);
            } else {
                // warn the user and don't allow the insert
            }

        }

        @Override
        public void remove(FilterBypass fb, int offset, int length)
                throws BadLocationException {
            Document doc = fb.getDocument();
            StringBuilder sb = new StringBuilder();
            sb.append(doc.getText(0, doc.getLength()));
            sb.delete(offset, offset + length);

            if (test(sb.toString())) {
                super.remove(fb, offset, length);
            } else {
                // warn the user and don't allow the insert
            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Column_Label;
    private javax.swing.JTextField Column_TextField;
    private javax.swing.JButton Confirm_Button;
    private javax.swing.JComboBox<String> Corner_ComboBox;
    private javax.swing.JLabel Corner_Label;
    private javax.swing.ButtonGroup Direction_ButtonGroup;
    private javax.swing.JRadioButton Direction_Horizontal_Radio;
    private javax.swing.JLabel Direction_Label;
    private javax.swing.JRadioButton Direction_Vertical_Radio;
    private javax.swing.JLabel Grid_Label;
    private javax.swing.JSpinner Grid_Spinner;
    private javax.swing.JPanel IO_Panel;
    private javax.swing.JPanel Mod_Panel;
    private javax.swing.JLabel Pixel_Label;
    private javax.swing.JButton ReadDirectoryBrowse_Button;
    private javax.swing.JComboBox<String> Read_ComboBox;
    private javax.swing.JFileChooser Read_FileChooser;
    private javax.swing.JLabel Read_Label;
    private javax.swing.JLabel Row_Label;
    private javax.swing.JTextField Row_TextField;
    private javax.swing.JButton WriteDirectoryBrowse_Button;
    private javax.swing.JComboBox<String> Write_ComboBox;
    private javax.swing.JFileChooser Write_FileChooser;
    private javax.swing.JLabel Write_Label;
    // End of variables declaration//GEN-END:variables
    // Manual variables declaration
    private Vector<String> ReadOptions, WriteOptions;
    private PrintCorner[] corners;
    private String[] cornerNames;
    private Map<String, Icon> mapImages;
    private Map<PrintCorner, String> mapWord;
    private final Map<String, PrintCorner> inverseMapWord;
    private ImageCellRenderer renderer;

    private enum PrintCorner {
        UPPERLEFT, UPPERRIGHT, LOWERLEFT, LOWERRIGHT;
    }

    private enum PrintDirection {
        VERTICAL, HORIZONTAL;
    }
    private IndexFrameForm InputForm;
    private String ReadDirectory, WriteDirectory;
    private Integer Row, Column, Grid;
    private PrintCorner Corner;

    private PrintDirection Direction;
    //References:
    //https://stackoverflow.com/questions/18937676/how-to-put-jpg-in-a-jcombobox
}
